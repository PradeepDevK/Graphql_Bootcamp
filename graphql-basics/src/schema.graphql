type Query {
        users(query: String): [User!]
        posts(query: String): [Post!]
        me: User!
        testPosts: Post!
        comments: [Comment!]
    }

    type Mutation {
        createUsers(data: CreateUserInput) : User!
        deleteUsers(id: ID!) : User!
        updateUsers(id: ID!, data: UpdateUserInput!): User!
        createPosts(data: CreatePostInput): Post!
        deletePosts(id: ID!) : Post!
        updatePosts(id: ID!, data: UpdatePostInput!): Post!
        createComments(data: CreateCommentInput) : Comment!
        deleteComments(id: ID!) : Comment!
        updateComments(id: ID!, data: UpdateCommentInput): Comment! 
    }

type Subscription {
    comment(postId: ID!) : CommentSubscriptionPayload!
    post: PostSubscriptionPayload!
}

    input CreateUserInput {
        name: String!,
        email: String!,
        age: Int
    }

    input UpdateUserInput {
        name: String,
        email: String,
        age: Int
    }

    input CreatePostInput {
        title: String!,
        body: String!,
        published: Boolean!,
        author: ID!
    }

    input UpdatePostInput {
        title: String,
        body: String,
        published: Boolean,
    }

    input CreateCommentInput {
        text: String!,
        author: ID!,
        postId: ID!
    }

    input UpdateCommentInput {
        text: String
    }

    type User {
        id: ID!,
        name: String!,
        email: String!,
        age: Int,
        posts: [Post!]!
        comments: [Comment!]!
    }

    type Post {
        id: ID!,
        title: String!,
        body: String!,
        published: Boolean!,
        author: User!,
        comments: [Comment!]!
    }

    type Comment {
        id: ID!,
        text: String!
        author: User!
        postId: Post!
    }

    enum  MutationType {
        CREATED
        UPDATED
        DELETED
    }

    type PostSubscriptionPayload {
        mutation : MutationType!
        data: Post!
    }

    type CommentSubscriptionPayload {
        mutation : MutationType!
        data: Comment!
    }