# import UserOrderByInput, PostOrderByInput from './generated/prisma.graphql'

type Query {
        users(query: String, first: Int, skip: Int, after: String, orderBy: UserOrderByInput): [User!]
        posts(query: String, first: Int, skip: Int, after: String, orderBy: PostOrderByInput): [Post!]
        myPosts(query: String, first: Int, skip: Int, after: String, orderBy: PostOrderByInput): [Post!]
        me: User!
        post(id: ID!): Post!
        comments(first: Int, skip: Int, after: String, orderBy: CommentOrderByInput): [Comment!]
    }

    type Mutation {
        createUsers(data: CreateUserInput) : AuthPayload!
        login(data: LoginUserInput): AuthPayload!
        deleteUsers : User!
        updateUsers(data: UpdateUserInput!): User!
        createPosts(data: CreatePostInput): Post!
        deletePosts(id: ID!) : Post!
        updatePosts(id: ID!, data: UpdatePostInput!): Post!
        createComments(data: CreateCommentInput) : Comment!
        deleteComments(id: ID!) : Comment!
        updateComments(id: ID!, data: UpdateCommentInput): Comment! 
    }

type Subscription {
    comment(postId: ID!) : CommentSubscriptionPayload!
    post: PostSubscriptionPayload!
    myPost: PostSubscriptionPayload!
}

type AuthPayload {
    token: String!,
    user: User!
}

    input LoginUserInput {
        email: String!
        password: String!
    }

    input CreateUserInput {
        name: String!,
        email: String!,
        password: String!
    }

    input UpdateUserInput {
        name: String,
        email: String,
        password: String
    }

    input CreatePostInput {
        title: String!,
        body: String!,
        published: Boolean!
    }

    input UpdatePostInput {
        title: String,
        body: String,
        published: Boolean,
    }

    input CreateCommentInput {
        text: String!,
        postId: ID!
    }

    input UpdateCommentInput {
        text: String
    }

    type User {
        id: ID!,
        name: String!,
        email: String,
        password: String!,
        posts: [Post!]!
        comments: [Comment!]!
        updatedAt: String!,
        createdAt: String!
    }

    type Post {
        id: ID!,
        title: String!,
        body: String!,
        published: Boolean!,
        author: User!,
        comments: [Comment!]!,
        updatedAt: String!,
        createdAt: String!
    }

    type Comment {
        id: ID!,
        text: String!
        author: User!
        postId: Post!,
        updatedAt: String!,
        createdAt: String!
    }

    enum  MutationType {
        CREATED
        UPDATED
        DELETED
    }

    type PostSubscriptionPayload {
        mutation : MutationType!
        node: Post
    }

    type CommentSubscriptionPayload {
        mutation : MutationType!
        node: Comment
    }